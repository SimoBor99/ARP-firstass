# ARP First assignment

Installing and running
----------------------------------------------
Before running the program with shell file, it is fundamental to install one library:
lncurses.

For doing that, you can run on the terminal the following command:

``` sudo apt-get install libncurses-dev```

After doing that, it is the time to create the binary of all 6 processes and run the programm. Before running it, you need to make first_ass.sh executable, by using on the terminal:

``` chmod u+x first_ass.sh```

You can find first_ass.sh into ```add_materials``` folder, but, when launched, this file must be in the same folder of the project. 

Then launch it to create all binary and execute the program, by the command:

```./first_ass.sh```

Once you have done this, the program is successfully launched!

Description of the program
----------------------------------------------
This program simulates a simple hoist with 2 degrees of freedom.
The hoist can move horizonthally and vertically, in a range between 0-39 (horizonthally) and 0-9 (vertically).
After starting, the program spawns two console windows: the command console and the inspection console.
In the command console, the user can input some command by pressing one of the six buttons present on the interface. These commands can increase, decrease or stop the velocity of the motor along one of the two axis where the hoist is able to move.
In the inspection console, the user can see where the hoist end-effector is placed in space and its coordinates. The user has also the possibility to press two buttons: the reset button, which takes the hoist back to its original position, and the stop button, which immediately stops the hoist movement.
Last but not least, if the state of the program doesn't change (hoist doesn't move, user doesn't press any button) for 1 minute, the program will automatically terminate its own execution.

Development of the program
----------------------------------------------

The program is developed with 6 different processes:

* Master Process
This is the process which starts everything: after starting its execution, this process spawns five other processes, passing them the arguments they need for communicating through each other and for writing on their log files.
After that, the process starts to control the last modify time of all the log files of the others five processes. Then, the process takes the current time and compares it with the five last modify times.
If every log file has been modified more than one minute ago, this process sends a kill signal to all the other processes, unlink all the pipes used during the execution and then terminates itself.

* Command Console Process
This process shows a graphic interface with the six input buttons mentioned above. The process initailize the velocities of the x and z axis at zero. Then, it passes its PID to the inspection console process, which will be used to implement signals between the two processes. After this, the process enters in and endless loop, where it checks if a button has been pressed and, if that is the case, it increments the correspondent velocity (x or z) and sends it to its correspondent process (the motor x process or the motor z process).
In this process are also implemented two signal handlers, for the stop and reset operations.
This process write in its log file whenever a button is pressed.

* Inpection Console Process
This process shows a graphic interface with the hoist end-effector, its coordinates and the two emergency buttons mentioned above. The process is an infinite loop, in which the process checks if one of the two emergency buttons has been pressed:
If the stop button is pressed, a signal is sent to the command process and to the two motors processes, which set the velocities of both the x and z axis to zero in the three processes.
If the reset button is pressed, a signal is sent to the command process and to the two motor processes. The signal sent to the command process blocks the input given by the user, so the command process enter a while loop which in which it does nothing, until the reset procedure has concluded. The signal sent to the two motors processes makes them enter into a while loop, in which the two coordinates of the end-effector are continously checked and if the position is different from zero, a negative velocity is set and mantained, until it reaches the zero position.
After both motors have reached the zero position, the two motors' velocities are set to zero and the command console inputs are rehabilitated.
In the loop, this process also uses the select() instruction to check if something is readable from the world process (there are 2 pipes, because the world process send to the inspection process both the x position and the z position) and if it is the case, the read position value(s) are changed.
To conclude, the process updates the graphic interface the end of every loop.

* Motor Processes
These two processes are identical, so they are included in the same section.
These processes are not opened in konsole, so they are invisible to the user. They have to read the current velocities of hoist, which are setted by the user thanks to the grapichal interface of **Inspection** process. Then they have to calculate the ideal position of end effector, and send it to the world process; actually the position are two: one for the x axis and another for the z axis.
There are also signal handler implemented here, in order to manage the reset and stop signals, sent by the **inspection** process.

* world process
This process takes the position values for the x-axe and the z-axe from the motors processes (a select() is used to do so). Then, this process add to these two positions a little random error, in order to simulate better a real-world problem, where the theorethical value and the real value are usually not exactly the same. After that, the two real position values are sent through a pipe to the **inspection** process, which will take these values and display them into its graphical interface.


User Guide
----------------------------------------------
Once you have followed the guide on README file, that is in our github repository https://github.com/SimoBor99/ARP-firstass and is mandatory before to keep on reading this guide, the first two things that you can see are graphical interfaces of konsole, which are described below. Do not worry if the two interface are bugged; sometimes it happens and, for fixing it, resize them with mouse, and everything will be fine.

In the first one there are six buttons:
*Vx will decrease of one unity the horizonthal velocity of the hoist end-effector;
*Vx- stop will set to zero the horizonthal velocity of the hoist end-effector;
*Vx+ will increase of a unity the horizonthal velocity of the hoist end-effector;
*Vz- will decrease of a unity the vertical velocity of the hoist end-effector;
*Vz stop will set to zero the vertical velocity of the hoist end-effector;
*Vz+ will increase of a unity the horizonthal velocity of the hoist end-effector.
You can press any button by the click of mouse; when you click, if you do not see any white phrase on the down left side, reclick on the button because sometimes your action is not registered.
If the end-effector arrives at a border (0-39 horizonthally and 0-9 vertically), it will stop there, but the velocity will not reset! So be careful to stop the horizonthal velocity before starting to go into the other direction.
(IMPORTANT NOTE: if your computer has a touchpad and you want to press a button using it, it can happen sometimes that the button will be pressed two times; using a mouse will solve this problem).

In the second graphical interface, we have a display of the hoist, where we can see the position of the hoist's end-effector. In this interface there are also two emergency buttons  that, when pressed, will immediately perform an emergency action:
* S will immediately stop the movement of the hoist's end-effector (both horizonthal and vertical);
* R will reset te position of the hoist's end-effector to the starting one (at (0;0)); the reset is not immediate, instead the end-effector will slowly start to go towards the origin.
If the S button is pressed while a reset is ongoing, the reset action will be cancelled and the end-effector will immediately stop.

To terminate the execution the are two different ways:
* The first one is to stop both motors and wait until a minute passes, without pressing any button; in this way, the master process will notice the minute of inactivity, will kill all processes and terminate its own execution;
* The second one is to press ctrl+C on the terminal window where the program has been launched: the master process will kill all processes and terminate its own execution.
